import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext

from bot.states import PaymentStates
from bot.keyboards import get_payment_amount_keyboard, get_main_keyboard
from database.database import Database
from translations import get_text
from config import PAYMENT_CARD, ADMIN_IDS

router = Router()
logger = logging.getLogger(__name__)

# Payment menu items in different languages
PAYMENT_TEXTS = ["üí≥ To'lov qilish", "üí≥ –û–ø–ª–∞—Ç–∞", "üí≥ Payment"]
ACCOUNT_TEXTS = ["üí∞ Mening hisobim", "üí∞ –ú–æ–π —Å—á–µ—Ç", "üí∞ My Account"]

@router.message(F.text.in_(PAYMENT_TEXTS))
async def handle_payment_request(message: Message, state: FSMContext, user_lang: str):
    """Handle payment request"""
    await state.clear()  # Clear any active state
    
    if user_lang == "uz":
        explanation_text = """üí≥ **To'lov miqdorini tanlang**

üìä **Narxlar eslatma:**
‚Ä¢ Taqdimot: 5,000-10,000 so'm (slaydlar soni bo'yicha)
‚Ä¢ Mustaqil ish: 5,000-12,000 so'm (sahifalar soni bo'yicha)  
‚Ä¢ Referat: 5,000-12,000 so'm (sahifalar soni bo'yicha)

üí∞ **To'lov miqdori sizning ehtiyojingizga bog'liq:**
‚Ä¢ Bir nechta hujjat yaratishni rejalashtirgan bo'lsangiz
‚Ä¢ Kelajakda foydalanish uchun balansni to'ldirish
‚Ä¢ Chegirmali to'plov variantlari

üëá **Quyidagi variantlardan birini tanlang:**"""
    elif user_lang == "ru":
        explanation_text = """üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞**

üìä **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ü–µ–Ω–∞–º:**
‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: 5,000-10,000 —Å—É–º (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–∞–π–¥–æ–≤)
‚Ä¢ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞: 5,000-12,000 —Å—É–º (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)
‚Ä¢ –†–µ—Ñ–µ—Ä–∞—Ç: 5,000-12,000 —Å—É–º (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)

üí∞ **–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π:**
‚Ä¢ –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–∫–∏–¥–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã

üëá **–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:**"""
    else:  # en
        explanation_text = """üí≥ **Select payment amount**

üìä **Price reference:**
‚Ä¢ Presentation: 5,000-10,000 som (depends on number of slides)
‚Ä¢ Independent work: 5,000-12,000 som (depends on number of pages)
‚Ä¢ Research paper: 5,000-12,000 som (depends on number of pages)

üí∞ **Payment amount depends on your needs:**
‚Ä¢ If you plan to create multiple documents
‚Ä¢ Top up balance for future use
‚Ä¢ Discount payment options

üëá **Choose one of the following options:**"""
    
    await message.answer(
        explanation_text,
        reply_markup=get_payment_amount_keyboard(user_lang),
        parse_mode="Markdown"
    )

@router.message(F.text.in_(ACCOUNT_TEXTS))
async def handle_account_info(message: Message, state: FSMContext, db: Database, user_lang: str, user):
    """Show account information"""
    await state.clear()  # Clear any active state
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    free_service_status = "‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" if user.free_service_used else "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
    
    await message.answer(
        get_text(user_lang, "balance_info", 
                balance=user.balance, 
                free_service=free_service_status),
        reply_markup=get_main_keyboard(user_lang)
    )

@router.callback_query(F.data.startswith("pay_"))
async def handle_payment_amount_selection(callback: CallbackQuery, state: FSMContext, user_lang: str):
    """Handle payment amount selection"""
    amount = int(callback.data.split("_")[1])
    await state.update_data(payment_amount=amount)
    
    await callback.message.edit_text(
        get_text(user_lang, "payment_instructions", card=PAYMENT_CARD)
    )
    
    await state.set_state(PaymentStates.waiting_for_screenshot)

@router.message(PaymentStates.waiting_for_screenshot, F.content_type.in_([ContentType.PHOTO, ContentType.DOCUMENT]))
async def handle_payment_screenshot(message: Message, state: FSMContext, db: Database, user_lang: str, user):
    """Handle payment screenshot"""
    try:
        data = await state.get_data()
        amount = data['payment_amount']
        
        # Get file ID
        if message.photo:
            file_id = message.photo[-1].file_id
        else:
            file_id = message.document.file_id
        
        # Create payment record
        payment_id = await db.create_payment(user.id, amount, file_id)
        
        # Notify user
        await message.answer(
            get_text(user_lang, "payment_sent_to_admin"),
            reply_markup=get_main_keyboard(user_lang)
        )
        
        # Notify admins
        await notify_admins_about_payment(message.bot, user, amount, message.message_id, payment_id)
        
    except Exception as e:
        logger.error(f"Error processing payment: {e}")
        await message.answer(
            "‚ùå Xatolik yuz berdi. Qayta urinib ko'ring.",
            reply_markup=get_main_keyboard(user_lang)
        )
    
    finally:
        await state.clear()

@router.message(PaymentStates.waiting_for_screenshot)
async def handle_invalid_payment_screenshot(message: Message, user_lang: str):
    """Handle invalid payment screenshot"""
    await message.answer("‚ùå Iltimos, to'lov chekini rasm yoki fayl sifatida yuboring.")

async def notify_admins_about_payment(bot, user, amount, message_id, payment_id):
    """Notify admins about new payment"""
    from bot.keyboards import get_payment_review_keyboard
    
    user_link = f"@{user.username}" if user.username else f"tg://user?id={user.telegram_id}"
    
    for admin_id in ADMIN_IDS:
        try:
            # First, forward the screenshot
            await bot.copy_message(
                chat_id=admin_id,
                from_chat_id=user.telegram_id,
                message_id=message_id
            )
            
            # Then send payment info with buttons below the image
            text = (
                f"üßæ Yangi to'lov:\n"
                f"üë§ Foydalanuvchi: {user_link}\n"
                f"üíµ Summasi: {amount:,} so'm\n"
                f"üìÖ To'lov ID: {payment_id}\n\n"
                f"‚¨ÜÔ∏è Yuqoridagi chekni tekshiring va to'lovni tasdiqlang:"
            )
            
            await bot.send_message(
                admin_id,
                text,
                reply_markup=get_payment_review_keyboard(payment_id)
            )
            
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")
